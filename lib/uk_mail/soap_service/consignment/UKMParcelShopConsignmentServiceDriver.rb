# encoding: UTF-8
# Generated by wsdl2ruby (SOAP4R-NG/2.0.4)
require_relative 'UKMParcelShopConsignmentService.rb'
require_relative 'UKMParcelShopConsignmentServiceMappingRegistry.rb'
require 'soap/rpc/driver'

module UKMail::SoapService::Consignment

class IUKMParcelShopConsignmentService < ::SOAP::RPC::Driver
  TEST_URL = "https://qa-api.ukmail.com/Services/UKMConsignmentServices/UKMParcelShopConsignmentService.svc"
  LIVE_URL = "https://api.ukmail.com/Services/UKMConsignmentServices/UKMParcelShopConsignmentService.svc"

  Methods = [
    [ "http://www.UKMail.com/Services/IUKMParcelShopConsignmentService/AddDomesticConsignment",
      "addDomesticConsignment",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddDomesticConsignment"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddDomesticConsignmentResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.UKMail.com/Services/IUKMParcelShopConsignmentService/AddDomesticConsignmentV2",
      "addDomesticConsignmentV2",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddDomesticConsignmentV2"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddDomesticConsignmentV2Response"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.UKMail.com/Services/IUKMParcelShopConsignmentService/AddDomesticConsignmentDeferred",
      "addDomesticConsignmentDeferred",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddDomesticConsignmentDeferred"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddDomesticConsignmentDeferredResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.UKMail.com/Services/IUKMParcelShopConsignmentService/AddInternationalConsignment",
      "addInternationalConsignment",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddInternationalConsignment"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddInternationalConsignmentResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.UKMail.com/Services/IUKMParcelShopConsignmentService/AddPacketConsignment",
      "addPacketConsignment",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddPacketConsignment"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.UKMail.com/Services/Contracts/ServiceContracts", "AddPacketConsignmentResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ]
  ]

  def initialize
    endpoint_url = (UKMail.config.env == :production ? LIVE_URL : TEST_URL)
    super(endpoint_url, nil)
    self.mapping_registry = UKMParcelShopConsignmentServiceMappingRegistry::EncodedRegistry
    self.literal_mapping_registry = UKMParcelShopConsignmentServiceMappingRegistry::LiteralRegistry
    init_methods
  end

private

  def init_methods
    Methods.each do |definitions|
      opt = definitions.last
      if opt[:request_style] == :document
        add_document_operation(*definitions)
      else
        add_rpc_operation(*definitions)
        qname = definitions[0]
        name = definitions[2]
        if qname.name != name and qname.name.capitalize == name.capitalize
          ::SOAP::Mapping.define_singleton_method(self, qname.name) do |*arg|
            __send__(name, *arg)
          end
        end
      end
    end
  end
end


end
